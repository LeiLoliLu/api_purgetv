{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TokenService {\n  constructor() {\n    this.issuer = {\n      login: 'http://127.0.0.1:8000/api/login',\n      register: 'http://127.0.0.1:8000/api/register'\n    };\n  }\n  handleData(token) {\n    localStorage.setItem('auth_token', token);\n  }\n  getToken() {\n    return localStorage.getItem('auth_token');\n  }\n  // Verify the token\n  isValidToken() {\n    const token = this.getToken();\n    if (token) {\n      const payload = this.payload(token);\n      if (payload) {\n        return Object.values(this.issuer).indexOf(payload.iss) > -1 ? true : false;\n      }\n    } else {\n      return false;\n    }\n  }\n  payload(token) {\n    const jwtPayload = token.split('.')[1];\n    return JSON.parse(atob(jwtPayload));\n  }\n  // User state based on valid token\n  isLoggedIn() {\n    return this.isValidToken();\n  }\n  // Remove token\n  removeToken() {\n    localStorage.removeItem('auth_token');\n  }\n  static #_ = this.ɵfac = function TokenService_Factory(t) {\n    return new (t || TokenService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenService,\n    factory: TokenService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAIA,OAAM,MAAOA,YAAY;EAKvBC;IAJQ,WAAM,GAAG;MACfC,KAAK,EAAE,iCAAiC;MACxCC,QAAQ,EAAE;KACX;EACc;EACfC,UAAU,CAACC,KAAU;IACnBC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEF,KAAK,CAAC;EAC3C;EACAG,QAAQ;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,YAAY,CAAC;EAC3C;EACA;EACAC,YAAY;IACV,MAAML,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,IAAIH,KAAK,EAAE;MACT,MAAMM,OAAO,GAAG,IAAI,CAACA,OAAO,CAACN,KAAK,CAAC;MACnC,IAAIM,OAAO,EAAE;QACX,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,MAAM,CAAC,CAACC,OAAO,CAACJ,OAAO,CAACK,GAAG,CAAC,GAAG,CAAC,CAAC,GACvD,IAAI,GACJ,KAAK;;KAEZ,MAAM;MACL,OAAO,KAAK;;EAEhB;EACAL,OAAO,CAACN,KAAU;IAChB,MAAMY,UAAU,GAAGZ,KAAK,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtC,OAAOC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,UAAU,CAAC,CAAC;EACrC;EACA;EACAK,UAAU;IACR,OAAO,IAAI,CAACZ,YAAY,EAAE;EAC5B;EACA;EACAa,WAAW;IACTjB,YAAY,CAACkB,UAAU,CAAC,YAAY,CAAC;EACvC;EAAC;qBArCUxB,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAyB,SAAZzB,YAAY;IAAA0B,YAFX;EAAM","names":["TokenService","constructor","login","register","handleData","token","localStorage","setItem","getToken","getItem","isValidToken","payload","Object","values","issuer","indexOf","iss","jwtPayload","split","JSON","parse","atob","isLoggedIn","removeToken","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Desktop\\changeorg\\Entrega_Angular\\frontend\\src\\app\\shared\\token.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TokenService {\r\n  private issuer = {\r\n    login: 'http://127.0.0.1:8000/api/login',\r\n    register: 'http://127.0.0.1:8000/api/register',\r\n  };\r\n  constructor() {}\r\n  handleData(token: any) {\r\n    localStorage.setItem('auth_token', token);\r\n  }\r\n  getToken() {\r\n    return localStorage.getItem('auth_token');\r\n  }\r\n  // Verify the token\r\n  isValidToken() {\r\n    const token = this.getToken();\r\n    if (token) {\r\n      const payload = this.payload(token);\r\n      if (payload) {\r\n        return Object.values(this.issuer).indexOf(payload.iss) > -1\r\n          ? true\r\n          : false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  payload(token: any) {\r\n    const jwtPayload = token.split('.')[1];\r\n    return JSON.parse(atob(jwtPayload));\r\n  }\r\n  // User state based on valid token\r\n  isLoggedIn() {\r\n    return this.isValidToken();\r\n  }\r\n  // Remove token\r\n  removeToken() {\r\n    localStorage.removeItem('auth_token');\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}